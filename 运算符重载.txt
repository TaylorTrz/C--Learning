//运算符本质上是函数，但是更加直观
//运算符重载有限制

//运算符声明
//一元运算符
public static 类型 operator 一元运算符 (类型 参数名){}
//二元运算符
public static 类型 operator 二元运算符 (类型 参数名){}
//类型转换运算符声明
public stsatic implicit operator 类型 (类型 参数名){}
public stsatic explicit operator 类型 (类型 参数名){}

public struct Complex 
{
	public double real;
	public double imaginary;
	
	public Complex(double _real, double _imaginary)
	{
		this.real = _ral;
		this.imaginary= _imaginary;
	}
	public static Complex operator + (Complex c1)
	{
		return c1;
	}
	public static Complex operator - (Complex c1)
	{
		return new Complex(-c1.real, -c1.imaginary);
	}
	public static bool operator true (Complex c1)
	{
		return c1.real!=0  || c1.imaginary!=0;
	}
	public static bool operator false (Complex c1)
	{
		return c1.real==0 && c1.imaginary==0;
	}
	public static Complex operator + (Complex c1,Complex c2)
	{
		return new Complex(c1.real +c2.real, c1.imaginary+c2.imaginary);
	}
	public static Complex operator - (Complex c1,Complex c2)
	{
		return c1 + (-c2);
	}
	public static Complex operator * (Complex c1, Complex c2)
	{
		return new Complex(c1.real*c2.real-c1.imaginary*c2.imaginary,c1.real*c2.imaginary+c1.imaginary*c2.real);
	}
	public static Complex operator * (Complex c, double k)
	{
		return new Complex(c.real*k, c.imaginary*k);
	}
	public static Complex operator *(double k ,Complex c)
	{
		return c*k;
	}
	
	public override string ToString()
	{
		return(System.String.Format("{0}+{1}i"),real,imaginary);
	}
	
	public static void Main()
	{
		Complex num1 = new Complex(2,3);
		Complex num2 = new Complex(3,4);
		
		Complex result = num1 ? -num1 *5 +num2: new Complex(0,0);  //?相当于if，转换成bool类型, ?:是if(){}else{}的省略形式
		
		System.Comsole.WriteLine("First complex number: {0}", num1);
		System.Comsole.WriteLine("Second complex number: {0}",num2);
		Console.WriteLine("the result is: {0}", result);
	}

}





















