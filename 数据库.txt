//数据库Database
//数据库管理系统DBMS-->Oracle?MS SQL Server?Access(小型桌面数据库)？MySQL(开源)
//数据库系统的优点：共享性、独立性、完整性和冗余数据少
//管理功能：数据定义/操控/完整/安全/并发

//关系型数据库(RDB)
以二维表的形式组织数据
表DataTable
行DataRow:也叫记录Record
列DataColumn:也叫字段Field
主键Primary Key 某几个列组合起来，能识别出来跟其他记录不一样的地方，是数据库关键部分；


//数据库表的设计

//图书管理系统：
书记表：；编号ID, 书名，作者，出版社，关键字
院系表：编号ID,名称，办公地址，办公电话
读者表：人名编号ID,姓名，院系编号，Email
PS.院系与读者是一对多的关系
借阅表：人员编号，书号，日期
PS.读者与书籍是多对多的关系

//实体-关系图(E-R图)Entity-Relation图



//数据库的使用
用可视化的界面：用SQL Server的企业应用界面

//SQL(Structured Query Language) 即结构化查询语言
是数据库的标准操作语言
SQL包含数据定义、数据查询、数据操控、数据控制等功能
最常用语句：增删改查
CRUD-Create、Retrieve、Update、Delete


//常用的SQL聚合语句

选择数据
SELECT [All | Distinct] [Top n [Percent]] <选项>
FROM <表名列表>
[Where <条件>]
[Group By <分组的字段名列表> [Having <条件>]]
[Order By <排序的字段名列表> [ASC | DESC]]

1、All输出所有记录，可省略；Distinct输出无重复结果的记录; Top n 返回查询结果的前n行，Percent返回前n%行
2、<选项>可以是字段名、函数、表达式，多个选项可用逗号分隔；可以改变返回的列标题
     <选项1>[AS <显示列名>], <选项2>[AS <显示列名>], ...
     常用函数：SUM<字段名> AVG<字段名> MAX<字段名> MIN<字段名> COUNT<字段名> COUNT(*)
3、<表名列表>是要查询的表，可选择多个表，也可使用别名来区分不同的表：
     Select [<别名.>] <选项1> [AS <显示别名>], [<别名.>] <选项2> [AS <显示别名>]
     From 表名1[别名1], 表名2[别名2]
4、Where查询条件，单表与多表之间的条件表达式，可以使用比较运算符与逻辑运算符
5、Group By 分组，将指定字段列表中有相同值的record合并成组
6、Order By 按照字段排序，ASC表示Ascend，DESC表示descend

增加数据
Insert Into <表名> [(字段名表)] Values (字段值列表)
如果没有指定字段名，默认表中所有字段并按默认表中顺序排序
Insert Into Student (Sno, Sname, EnrollingScore) values ('201210020112', 'wangyang', 550)

更新数据
Update <表名> Set <字段名1>=<值表达式1>[,<字段名2>=<值表达式2>]
Where <条件> 
没有指定Where，更新所有行
Update Student Set Phone='123456' Where Sno='121545'

删除数据
Delete From <表名> [Where<条件>]
没有指定Where，删除所有行
Delete From Student Where Sno Like '2009%'

创建及删除数据表
Create Table [...]
   (id integer, name char(10), age integer)
Drop Table [...]

//通过编程来操作数据库

//Client/Server模式C/S模式
数据库提供服务，Server
程序是客户端，Client
客户端通过SQL命令来向服务端发出请求
//编程的任务
通过用户界面获取参数，并形成SQL语句
建立与数据库的连接
向数据库管理系统DBMS发出命令
从数据库得到数据并显示到用户界面




ADO.NET

System.Data名称空间
微软访问数据库的技术ADO.NET
实现数据库的访问：提供标准CRUD接口、对不同的数据库提供统一的访问接口

ODBC(open Database Connection)
DAO(Data Access Object)
ADO (ActiveX Data Object)
ADO.NET

数据访问层

数据提供程序 DataProvider
//Provider
//SQL Server.NET数据提供程序，用于SQL Server 7.0及以上版本
System.Data.SqlClient命名空间
//Ole DB.NET数据提供程序，用于OLE DB(Access)数据源
System.Data.OleDb
//ODBC.NET数据提供程序，用于ODBC数据源
System.Data.Odbc
//Oracle.NET，访问Oracle
System.Data.OracleClient

.NET Framework数据提供程序包含4个核心对象
Connection 建立与特定数据源的连接
Command 对数据源执行命令
DataReader 从数据中返回一个仅向前的只读数据流
DataAdapter 在数据源与数据集中交换数据

数据集 DataSet
是ADO.NET两个核心组件之一，是从数据源得到的数据在内存中的缓存，用XML描述。
每个DataSet由若干个DataTable对象组成，DataTable对象由Row、Column、Straint组成
DataRelation对象用来表示两个DataTable对象之间的父子关系，类似于关系数据库之间的主键列和外键列之间的关联。

体系结构
.NET Framework Data Provider -->Database
DataSet-->XML



//数据库的访问方法

两种基本模式：联机模式与脱机模式 

方式1：脱机模式使用Connection、Command、DataAdapter、DataSet对象
处理之前与数据库连接，处理过程中断开，处理完之后连接数据库更新数据

方式2：联机模式使用Connection、Command、DataReader对象
一直保持连接状态

都要使用Connection和Command
联机模式只需进行一次连接，速度快，无需考虑数据一致性问题，适用于中小型系统的数据实时变化，占用资源量大
脱机模式需资源量小、需多次连接、速度慢、存在数据一致性问题，适用于数据量大，网络结构复杂的数据查询大型系统

//Connection对象

用于连接数据库与应用程序
最重要的属性是连接字符串ConnectionString，是一个字符串，包含信息：
Provider, DataSource, Initial Catalog, UserID, Password, Connection TimeOut, Integrated Security, Persist Security info

对于不同的Data Provider有不同Connection对象
连接SQL Server数据库，可以SqlClient数据驱动程序(System.Data.SqlClient)，也可以OleDb数据驱动程序(System.Data.OleDb)
1) 连接字符串
Data Source=服务器名；Initial Catalog=数据库名； User ID=账户；Password=密码
2) 创建SqlConnection对象并设置ConnectionString属性
SqlConnection scon = new SqlConnection();
scon.Connectionstring = 连接字符串；

打开和关闭连接
scon.Opne();
scon.Close();


//ADO.NET联机模式的数据存取，客户端与服务器始终保持联机状态

数据存取步骤（SQL Server）：
1) 使用SqlConnection对象与数据库建立连接
2) 使用SqlCommand对象向数据库检索数据，或直接进行编辑
3) 如果SqlCommand对象执行检索操作，则取出数据放在SqlDataReader对象读取，执行编辑操作，直接进行步骤(5)
4) 完成数据检索操作后，关闭SqlDataReader对象
5) 关闭SqlConnection对象

//Command对象
建立数据连接后，可以利用Conmand对象来执行命令并从数据源返回结果，实现增删查改

属性：
Connection: 获取或设置Command对象使用的Connection对象
CommandType: 获取或设置一个值，枚举类型有三个成员：StoredProcedure/ TableDirect/ Text
CommandText：获取或设置对数据库执行的SQL语句或存储过程
常用方法：
ExecuteReader()：执行SQL语句(Select)并生成一个DataReader对象
ExecuteScalar()：执行查询，并返回查询结果的第一行的第一列，忽略其他行列。
ExecuteNonQuery()：执行不返回行的SQL语句(Insert、Update、Delete)并返回受影响的行数

创建Command常用方法1：
SqlCommand 命名对象名=new SqlCommand();
命名对象名.Connection=连接对象名；
命名对象名.CommandType=CommandType.枚举成员；
命名对象名.CommandText=命名文本
创建Command常用方法1：
SqlCommand 命名对象名=new SqlCommand(命令文本，连接对象名);
命名对象名.CommandType=CommandType.枚举成员;


DataReader对象

DataReader对象提供一种 从数据库读取行的只进流的连接数据访问方式，包含在DataReader中的数据是从数据库返回的只读，只能向下滚动的流信息，适合只读取一次的数据
ADO.NET最高效得到数据的方法（？）
DataReader对象不能直接实例化，必须通过Command对象的ExecuteReader方法来生成。创建好之后，使用Read方法将隐含的记录指针指向第一个结果集的第一条记录，每调用一次Read方法获取一行数据，并将指针向后移动一步

常用属性：
FieldCount：获取当前行的列数
HasRows：返回一个值，指示是否包含一行或多行，则为True，否则False
IsClosed：获取一个值，指示DataReader对象是否已经关闭

常用方法：
close()：关闭DataReader对象，每次使用完都应该调用
GetName(int index)：给定Index表示从0开始的序列号，获取列的名称，
GetOrdinal(string name)：给定列名称，获取列的序号
NextResult()：读取批处理SQL语句，使得DataReader前进到下一个结果集，返回值为布尔型
Read()：使得DataReader前进到下一条记录，返回值为布尔型
还有一系列Get方法，当定位到一条记录，根据各列数据类型，选择不同的Get方法



ADO.NET脱机模式的数据存取
打开数据连接并读取数据后关闭数据库，但仍可以使用这些数据，当需要更新数据时再重新打开连接

脱机存取数据步骤(SQL Server)
1）使用SqlConnection对象与数据库建立连接
2）使用SqlCommand对象向数据库检索数据
3）把SqlCommand对象取回来的数据，放到SqlDataAdapter对象中
5）把SqlDataAdapter对象的数据填充到DataSet对象中
6）关闭SqlConnection对象
7）所有数据存取都在DataSet对象中进行
8）再次打开SqlConnection对象与数据库进行连接
9）利用SqlDataAdapter对象对数据库进行更新
9）关闭SqlConnection对象

DataAdapter对象
连接DataSet对象与数据源
4个属性：
SelectCommand、InsertCommand、UpdateCommand、DeleteCommand
同时可以创建CommandBuilder对象来自动生成用于单表更新的SQL语言，注意：仅针对数据库中的单个表，并且至少返回一个主键列或唯一列（自动产生Command）
方法：
//使用Fill方法从数据库中获取数据来填充DataSet、使用Update把DataSet中的数据更新至数据库中
只进行单次打开，可以不显示地使用Open方法打开连接，执行多次打开操作，应显示地调用Open、Close方法，保证占用资源少
Fill方法的重载：
Fill(DataSet ds)
Fill(DataSet dataSet, string Table)
//Update把在DataSet对象中进行的插入、删除和修改操作更新到数据库中，并返回成功更新的行数
Update方法的重载：
Update(DataSet ds)
Update(DateSet dataSet, string Table)
//创建DataAdapter对象
方法1：
SqlCommand 命名对象名=new SqlCommand(Select 命令文本，连接对象名)；
SqlDataAdapter 数据适配器对象名=new SqlDataAdapter(命令对象名);
方法2：
SqlDataAdapter 数据适配器对象名=new SqlDataAdapter(Select 命令文本，连接对象名);

DataSet对象
是一个存储在客户端内存中的临时数据库，客户端所有存取操作都是对DataSet对象进行

创建方法1：
DataSet 数据集对象名=new DataSet();
创建方法2：
DataSet 数据集对象名=new DataSet(数据集名称);

DataSet对象
包括多个DataTable对象(Tables属性，是DataTableCollection类)和DataRelation对象(Relations对象，是DataRelationCollection类)

DataTable对象
包括多个DataRow(Rows属性，DataRowCollection集合类)、DataColumn(Columns属性，DataColumnCollection集合类)、Constraint对象(Constraints属性，ConstraintCollection集合类)
创建DataTable的方法1：
DataTable 数据表对象名=new DataTable();
创建DataTable的方法2：
DataTable 数据表对象名=new DataTable(数据表名称);

DataColumn对象
相当于数据表中的列，代表一个字段Field
常用方法：
DataColumn 列对象名=new DataColumn();
DataColumn 列对象名=new DataColumn(列名);
DataColumn 列对象名=new DataColumn(列名, 类型);

DataRow对象
相当于数据表中的行，代表一个记录Record
//添加记录行
1）创建DataRow对象
2）指定DataRow对象不同字段的值
3）调用DataTable对象Rows集合属性的Add方法
//查找记录行
使用Rows集合的Find方法查找指定主键值的记录行
//修改记录行
1）获取指定记录行的DataRow对象
2）调用DataRow对象的BeginEdit方法进入记录行的编辑模式
3）更改记录行的列的值
4）调用DataRow对象的EndEdit方法退出记录行的编辑模式
//删除记录行
使用DataRow对象的Delete方法删除记录行
DataRow对象名.Delete();
//RowState属性
反映记录行的操作状态，其值是DataRowState枚举成员之一
Added、Deleted、Detached(已创建)、Modified、Unchanged(调用DataRow对象的AcceptChanges方法时，状态为Unchanged)
AcceptChanges方法与RejectChanges方法

ADO.NET和XML
DataSet对象可串列化XML，XML可反串列化成DataSet对象
ReadXml()
WriteXml()



酒店管理系统

分层架构
UI:         用户界面层 user graphical interface
BLL:       业务逻辑层 bussiness logic layer
DAL：    数据访问层 data access layer   
Model:   数据模型

ORMapping Object-relation Mapping
对象-关系映射





























